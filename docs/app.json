[{"name":"server.R","content":"library(shiny)\n\nfunction(input, output, session) {\n  \n  observeEvent(input$distribucionDM1,{\n    output$Histograma_promedios = renderPlot({\n      plot(1, 1, col = \"white\", ylab = \"\", xlab = \"\", axes = F)\n    })\n    \n    output$fdp_fmp_simulaciones = renderPlot({\n      plot(1, 1, col = \"white\", ylab = \"\", xlab = \"\", axes = F)\n    })\n  })\n  \n  histTCL = function(valores, media, desviacion, simulaciones){\n    medias = unlist(lapply(X = valores, FUN = mean))\n    factor = max(abs(media - c(min(medias), max(medias))))\n    lim_inf = media - factor; lim_sup = media + factor\n    grilla = seq(from = lim_inf, to = lim_sup, by = 0.001)\n    teoricos = dnorm(x = grilla, mean = media, sd = desviacion)\n    \n    densidad_medias = density(medias)\n    hist(x = medias, main = \"Distribución de las medias\", ylab = \"Función de densidad\",\n         xlab = \"Valores de la media en las simulaciones\", freq = FALSE, las = 1, breaks = round(1 + log2(simulaciones)),\n         xlim = c(lim_inf, lim_sup), ylim = c(0, max(densidad_medias$y, teoricos)*1.1))\n    lines(densidad_medias , col = \"darkred\")\n    lines(x = grilla, y = teoricos, col = \"darkblue\")\n    legend(\n      \"topright\", title = \"Distribución\", bty = \"n\",\n      legend = c(\"Aproximada \", paste0(\"Normal teórica - TCL: N(\", media, \", \", round(desviacion^2,5), \")\")),\n      lty = 1, col = c(\"darkred\", \"darkblue\")\n    )\n  }\n  \n  densidad_masa = function(x, valores, tipo, graph = \"p\"){\n    plot(x, valores, main = paste(\"Función de \", tipo, \" probabilidad\"),\n         xlab = \"Valores de X\", ylab = \"\", las = 1, type = graph, pch = 16)\n  }\n  \n  plot_simulaciones = function(valores, dominio){\n    largo = length(valores[[1]])\n    cantidad = 5\n    datos = data.frame(\n      \"valores\" = unlist(valores[1:cantidad]),\n      \"dominio\" = rep(1:cantidad, rep(largo, cantidad))\n    )\n    plot(\n      datos$dominio, datos$valores,\n      main = paste(\"Primeras \", cantidad, \" simulaciones\"),\n      xlab = \"Simulación\", ylab = \"Valores de X simulados\", xaxt = \"n\",\n      las = 1, pch = 16, ylim = c(min(datos$valores), max(datos$valores)*1.2)\n    )\n    axis(side = 1, at = 1:cantidad, labels = paste0(\"S\", 1:cantidad))\n    legend(\n      \"top\", \n      legend = paste0(rep(\"S\", cantidad), 1:cantidad, rep(\": \", cantidad),\n                      unlist(lapply(X = valores[1: cantidad], FUN = function(x){return(round(mean(x), 4))}))),\n      bty = \"n\", horiz = TRUE, title = \"Media de la simulación\")\n  }\n\n  observeEvent(input$go_DM1,{\n    \n    n = input$nDM1\n    simulaciones = input$simulacionesDM1\n    \n    if(input$distribucionDM1 == \"Normal\"){\n      media = input$mediaDM1_normal\n      sigma = sqrt(input$varianzaDM1_normal)\n      desviacion = sigma/sqrt(n)\n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rnorm(n = n, mean = media, sd = sigma))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        medias = unlist(lapply(X = valores, FUN = mean))\n        factor = max(abs(media - c(min(medias), max(medias))))\n        lim_inf = media - factor; lim_sup = media + factor\n        grilla = seq(from = lim_inf, to = lim_sup, by = 0.001)\n        teoricos = dnorm(x = grilla, mean = media, sd = desviacion)\n        \n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = grilla, valores = teoricos, tipo = \"densidad\", graph = \"l\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Exponencial\"){\n      tasa = input$tasaDM1_exponencial\n      media = tasa\n      desviacion = sqrt(tasa^2/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rexp(n = n, rate = 1/tasa))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dexp(seq(from = 0, to = 30, by = 0.001), rate = 1/tasa)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = seq(from = 0, to = 30, by = 0.001), valores = teoricos, tipo = \"densidad\", graph = \"l\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Binomial\") {\n      ensayos = input$nDM1_binomial\n      p = input$pDM1_binomial\n      media = ensayos*p\n      desviacion = sqrt(ensayos*p*(1-p)/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rbinom(n = n, size = ensayos, prob = p))\n      })\n\n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dbinom(x = 0:ensayos, size = ensayos, prob = p)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = 0:ensayos, valores = teoricos,, tipo = \"masa\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Poisson\"){\n      tasa = input$tasaDM1_poisson\n      media = tasa\n      desviacion = sqrt(tasa/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rpois(n = n, lambda = tasa))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dpois(x = 0:30, lambda = tasa)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = 0:30, valores = teoricos, tipo = \"masa\")\n      })\n      \n    }\n    \n  })\n\n}\n","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinydashboard)\n# library(shinyjs)\n\n# Encabezado general\n\nencabezado = dashboardHeader(title = \"Estadística\")\n\n# Panel lateral general: filtro de temas\n\npanelLateral = dashboardSidebar(\n  # useShinyjs(),\n  collapsed = FALSE,\n  sidebarMenu(\n    menuItem(\n      \"Distribuciones muestrales\", tabName = \"DM\", startExpanded = TRUE,\n      menuSubItem(\"TCL\", tabName = \"DM1\")\n    )#,\n    # menuItem(\n    #   \"Intervalos de confianza\", tabName = \"IC\", startExpanded = TRUE,\n    #   menuSubItem(\"Para una media\", tabName = \"IC1\"),\n    #   menuSubItem(\"Para dos medias\", tabName = \"IC2\"),\n    #   menuSubItem(\"Para varianzas\", tabName = \"IC3\")\n    # ),\n    # menuItem(\n    #   \"Pruebas de Hipótesis\", tabName = \"PH\", startExpanded = TRUE,\n    #   menuSubItem(\"Para una media\", tabName = \"PH1\"),\n    #   menuSubItem(\"Para dos medias\", tabName = \"PH2\"),\n    #   menuSubItem(\"Para varianzas\", tabName = \"PH3\")\n    # ),\n    # menuItem(\n    #   \"Regresión Lineal\", tabName = \"RL\", startExpanded = TRUE,\n    #   menuSubItem(\"Simple\", tabName = \"RL1\"),\n    #   menuSubItem(\"Múltiple\", tabName = \"RL2\")\n    # )\n  )\n)\n\n# Paneles: cuerpo de cada panel del Panel lateral\n# Un cuerpo se puede volver a dividir en otro tipo de Layout\n\nsimulador = actionButton(inputId = \"go_DM1\", label = \"Simular\")\n\ncuerpo_DM1 = sidebarLayout(\n  sidebarPanel(\n    width = 3,\n    selectInput(inputId = \"distribucionDM1\", label = \"Distribución\", choices = c(\"Normal\", \"Exponencial\", \"Binomial\", \"Poisson\")),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Normal'\",\n      sliderInput(inputId = \"mediaDM1_normal\", label = \"Media poblacional\", min = 0, max = 20, value = 12, step = 0.2),\n      sliderInput(inputId = \"varianzaDM1_normal\", label = \"Varianza poblacional\", min = 0, max = 20, value = 2, step = 0.1),\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Binomial'\",\n      sliderInput(inputId = \"nDM1_binomial\", label = \"Ensayos\", min = 1, max = 100, value = 12, step = 1),\n      sliderInput(inputId = \"pDM1_binomial\", label = \"Probabilidad de éxito\", min = 0, max = 1, value = 0.4, step = 0.05),\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Exponencial'\",\n      sliderInput(inputId = \"tasaDM1_exponencial\", label = \"Tasa\", min = 0, max = 20, value = 5, step = 0.1)\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Poisson'\",\n      sliderInput(inputId = \"tasaDM1_poisson\", label = \"Tasa\", min = 0, max = 20, value = 8, step = 0.1)\n    ),\n    sliderInput(inputId = \"nDM1\", label = \"Tamaño muestral\", min = 100, max = 1000, value = 200, step = 50),\n    sliderInput(inputId = \"simulacionesDM1\", label = \"Cantidad de simulaciones\", min = 100, max = 7000, value = 1300, step = 100),\n    simulador\n  ),\n  mainPanel(\n    width = 9,\n    plotOutput(\"Histograma_promedios\"), plotOutput(\"fdp_fmp_simulaciones\")\n  )\n)\n\ncuerpo_DM2 = fluidPage()\n\n# Asignando los cuerpos por filtro\nhoja_DM1 = tabItem(tabName = \"DM1\", fluidPage(cuerpo_DM1))\n# hoja_DM2 = tabItem(tabName = \"DM2\", cuerpo_DM2)\n\ncuerpo = dashboardBody(\n  tabItems(hoja_DM1)\n)\n\n# Despliegue general\nui = dashboardPage(encabezado, panelLateral, cuerpo, skin = \"black\")","type":"text"}]
