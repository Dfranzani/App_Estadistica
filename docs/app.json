[{"name":"server.R","content":"library(shiny)\nlibrary(shinydashboard)\n# library(shinydashboardPlus)\nlibrary(Cairo)\noptions(shiny.usecairo = T)\nlibrary(kableExtra)\nlibrary(shinyBS)\n\nfunction(input, output, session) {\n  \n  ### CUSTOM URL FOR MENUITEM IN SIDEBARMENU\n  ### NOT WORK IN GITHUB PAGES!\n  \n  # observeEvent(getQueryString(session)$tab, {\n  #   currentQueryString <- getQueryString(session)$tab # alternative: parseQueryString(session$clientData$url_search)$tab\n  #   if(is.null(input$sidebarID) || !is.null(currentQueryString) && currentQueryString != input$sidebarID){\n  #     freezeReactiveValue(input, \"sidebarID\")\n  #     updateTabItems(session, \"sidebarID\", selected = currentQueryString)\n  #   }\n  # }, priority = 1)\n  # \n  # observeEvent(input$sidebarID, {\n  #   currentQueryString <- getQueryString(session)$tab # alternative: parseQueryString(session$clientData$url_search)$tab\n  #   pushQueryString <- paste0(\"?tab=\", input$sidebarID)\n  #   if(is.null(currentQueryString) || currentQueryString != input$sidebarID){\n  #     freezeReactiveValue(input, \"sidebarID\")\n  #     updateQueryString(pushQueryString, mode = \"push\", session)\n  #   }\n  # }, priority = 0)\n  \n  ### END CUSTOM URL FOR MENUITEM IN SIDEBARMENU\n  \n  output$user <- shinydashboardPlus::renderUser({\n    shinydashboardPlus::dashboardUser(\n      name = \"Daniel Franzani\",\n      image = \"https://raw.githubusercontent.com/Dfranzani/App_Estadistica/refs/heads/main/App/Logo/Profile.jpeg\",\n      title = \"Ciencia de Datos\",\n      subtitle = \"\",\n      fluidRow(\n        shinydashboardPlus::dashboardUserItem(width = 6,shinydashboardPlus::socialButton(href = \"https://github.com/Dfranzani\", icon = icon(\"github-square\"))),\n        shinydashboardPlus::dashboardUserItem(width = 6, shinydashboardPlus::socialButton(href = \"https://dfranzani.github.io/website/principal/home.html\", icon = icon(\"blog\")))\n      )\n    )\n  })\n  \n  ### Distribuciones muestrales\n  \n  # observeEvent(input$distribucionDM1,{\n  #   output$Histograma_promedios = renderPlot({\n  #     plot(1, 1, col = \"white\", ylab = \"\", xlab = \"\", axes = F)\n  #   })\n  #   \n  #   output$fdp_fmp_simulaciones = renderPlot({\n  #     plot(1, 1, col = \"white\", ylab = \"\", xlab = \"\", axes = F)\n  #   })\n  # })\n  \n  histTCL = function(valores, media, desviacion, simulaciones){\n    medias = unlist(lapply(X = valores, FUN = mean))\n    factor = max(abs(media - c(min(medias), max(medias))))\n    lim_inf = media - factor; lim_sup = media + factor\n    grilla = seq(from = lim_inf, to = lim_sup, by = 0.001)\n    teoricos = dnorm(x = grilla, mean = media, sd = desviacion)\n    \n    densidad_medias = density(medias)\n    hist(x = medias, main = \"Distribución de las medias\", ylab = \"Función de densidad\",\n         xlab = \"Valores de la media en las simulaciones\", freq = FALSE, las = 1, breaks = round(1 + log2(simulaciones)),\n         xlim = c(lim_inf, lim_sup), ylim = c(0, max(densidad_medias$y, teoricos)*1.1))\n    lines(densidad_medias , col = \"darkred\")\n    lines(x = grilla, y = teoricos, col = \"darkblue\")\n    legend(\n      \"topright\", title = \"Distribución\", bty = \"n\",\n      legend = c(\"Aproximada \", paste0(\"Teórica - TCL: N(\", media, \", \", round(desviacion^2,5), \")\")),\n      lty = 1, col = c(\"darkred\", \"darkblue\")\n    )\n  }\n  \n  densidad_masa = function(x, valores, tipo, graph = \"p\"){\n    plot(x, valores, main = paste(\"Función de \", tipo, \" de probabilidad de \\n los datos muestrales simulados\"), bty = \"n\",\n         xlab = \"Valores de X\", ylab = \"\", las = 1, type = graph, pch = 16)\n  }\n  \n  plot_simulaciones = function(valores, dominio){\n    largo = length(valores[[1]])\n    cantidad = 4\n    datos = data.frame(\n      \"valores\" = unlist(valores[1:cantidad]),\n      \"dominio\" = rep(1:cantidad, rep(largo, cantidad))\n    )\n    boxplot(\n      datos$valores ~ datos$dominio, frame = F,\n      main = paste(\"Primeras \", cantidad, \" simulaciones\"),\n      xlab = \"Simulación\", ylab = \"Valores simulados\", xaxt = \"n\", yaxt = \"n\",\n      las = 1, pch = 16, ylim = c(min(datos$valores), max(datos$valores)*1.4)\n    )\n    axis(side = 1, at = 1:cantidad, labels = paste0(\"S\", 1:cantidad))\n    axis(side = 2, at = seq(from = min(datos$valores), to = max(datos$valores), length.out = 5),\n         labels = round(seq(from = min(datos$valores), to = max(datos$valores), length.out = 5)), las = 1)\n    legend(\n      \"top\", \n      legend = paste0(rep(\"S\", cantidad), 1:cantidad, rep(\": \", cantidad),\n                      unlist(lapply(X = valores[1: cantidad], FUN = function(x){return(round(mean(x), 4))}))),\n      bty = \"n\", title = \"Media de la simulación\", ncol = 2)\n  }\n\n  observeEvent(list(input$go_DM1, input$distribucionDM1),{\n    \n    n = input$nDM1\n    simulaciones = input$simulacionesDM1\n    \n    # set.seed(2024) # Bind cache\n    \n    if(input$distribucionDM1 == \"Normal\"){\n      media = input$mediaDM1_normal\n      sigma = sqrt(input$varianzaDM1_normal)\n      desviacion = sigma/sqrt(n)\n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rnorm(n = n, mean = media, sd = sigma))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        medias = unlist(lapply(X = valores, FUN = mean))\n        factor = max(abs(media - c(min(medias), max(medias))))\n        lim_inf = media - factor; lim_sup = media + factor\n        grilla = seq(from = lim_inf, to = lim_sup, by = 0.001)\n        teoricos = dnorm(x = grilla, mean = media, sd = desviacion)\n        \n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = grilla, valores = teoricos, tipo = \"densidad\", graph = \"l\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Exponencial\"){\n      tasa = input$tasaDM1_exponencial\n      media = tasa\n      desviacion = sqrt(tasa^2/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rexp(n = n, rate = 1/tasa))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dexp(seq(from = 0, to = 30, by = 0.001), rate = 1/tasa)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = seq(from = 0, to = 30, by = 0.001), valores = teoricos, tipo = \"densidad\", graph = \"l\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Binomial\") {\n      ensayos = input$nDM1_binomial\n      p = input$pDM1_binomial\n      media = ensayos*p\n      desviacion = sqrt(ensayos*p*(1-p)/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rbinom(n = n, size = ensayos, prob = p))\n      })\n\n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dbinom(x = 0:ensayos, size = ensayos, prob = p)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = 0:ensayos, valores = teoricos,, tipo = \"masa\")\n      })\n      \n    } else if(input$distribucionDM1 == \"Poisson\"){\n      tasa = input$tasaDM1_poisson\n      media = tasa\n      desviacion = sqrt(tasa/n)\n      \n      valores = lapply(X = as.list(1:simulaciones), FUN = function(sim){\n        return(rpois(n = n, lambda = tasa))\n      })\n      \n      output$Histograma_promedios = renderPlot({\n        histTCL(valores, media, desviacion, simulaciones)\n      })\n      \n      output$fdp_fmp_simulaciones = renderPlot({\n        teoricos = dpois(x = 0:30, lambda = tasa)\n        par(mfrow = c(1,2))\n        plot_simulaciones(valores)\n        densidad_masa(x = 0:30, valores = teoricos, tipo = \"masa\")\n      })\n    }\n  })\n  \n  \n  ### Intervalos de confianza\n  \n  hist_muestra_IC = function(x, y = NULL, nombre_media = nombre_media, control_lanzamiento = FALSE, colores){\n    \n    color = ifelse(\"red\" %in% colores, \"red\", \"grey\")\n    \n    if(nombre_media == \"Una\") {\n      titulo = ifelse(control_lanzamiento, \"Distribución de los datos de \\n la muestra del último IC\",\n                      paste(\"Distribución de los datos de la muestra \\n del IC número\", punto_seleccionado()))\n      hist(x, main = titulo, xlab = \"Valores de la muestra\", ylab = \"Frecuencia\", las = 1, col = color)\n    } else {\n      titulo = ifelse(control_lanzamiento, \"Distribuciones de los datos \\n de las muestras del último IC\",\n                      paste(\"Distribuciones de los datos de las muestras \\n del IC número\", punto_seleccionado()))\n      par(mfrow = c(2,1))\n      h1 = hist(x)\n      h2 = hist(y)\n      par(mar = c(0,5,3,3))\n      plot(h1, col = color, xlim = c(min(h1$breaks, h2$breaks), max(h1$breaks, h2$breaks)), ylim = c(0, max(h1$counts, h2$counts)),\n           las = 1, ylab = \"Frecuencias de X\", xaxt = \"n\", main = titulo)\n      par(mar = c(5,5,0,3))\n      plot(h2, col = color, xlim = c(min(h1$breaks, h2$breaks), max(h1$breaks, h2$breaks)), ylim = c(max(h1$counts, h2$counts), 0),\n           las = 1, main = \"\", ylab = \"Frecuencias de Y\", xlab = \"Valores de la muestra\")\n    }\n  }\n  \n  hist_medias_IC = function(x, nombre_media = nombre_media){\n    if(nombre_media == \"Una\") {\n      hist(x, main = \"Distribución de las medias muestrales\", xlab = \"Valores de la muestra\",\n           ylab = \"Frecuencia\", las = 1)\n    } else {\n      hist(x, main = \"Distribución de las diferencias \\n de las medias muestrales (X-Y)\", xlab = \"Valores de la muestra\",\n           ylab = \"Frecuencia\", las = 1)\n    }\n  }\n  \n  simulaciones_muestras = function(nombre_media = nombre_media){\n    muestras = lapply(X = as.list(1:input$simulacionesIC), FUN = function(sim){\n      if(nombre_media == \"Una\") {\n        data1 = rnorm(n = input$nIC, mean = input$muIC, sd = sqrt(input$sigma2IC))\n      } else {\n        data1 = rnorm(n = input$nICX, mean = input$muICX, sd = sqrt(input$varianzaUnaMediaX))\n        data2 = rnorm(n = input$nICY, mean = input$muICY, sd = sqrt(input$varianzaUnaMediaY))\n        data1 = list(\"data1\" = data1, \"data2\" = data2)\n      }\n      return(data1)\n    })\n    return(muestras)\n  }\n  \n  calculo_IC = function(data1, data2 = NULL, tipo, varianzas_conocidas, tipo_varianzas = FALSE, extremos,\n                        confianza, varianza = NA, varianzaX = NA, varianzaY = NA, tamanos_muestrales = NA, media = media){\n   \n    if(varianzas_conocidas == FALSE){\n      limites = t.test(x = data1, y = data2, conf.level = confianza, alternative = tipo, var.equal = tipo_varianzas)$conf.int[extremos]  \n    } else {\n      if (is.null(data2)) {\n        if(tipo == \"two.sided\") {\n          limites = mean(data1) + c(-1,1)*qnorm(1 - (1- confianza)/2)*sqrt(varianza/tamanos_muestrales[1])\n        } else if(tipo == \"less\") {\n          limites = mean(data1) + qnorm(confianza)*sqrt(varianza/tamanos_muestrales[1])\n        } else {\n          limites = mean(data1) - qnorm(confianza)*sqrt(varianza/tamanos_muestrales[1])\n        }\n      } else {\n        if(tipo == \"two.sided\") {\n          limites = c(mean(data1) - mean(data2) - qnorm(1 - (1- confianza)/2)*sqrt(varianzaX/tamanos_muestrales[1] + varianzaY/tamanos_muestrales[2]),\n                      mean(data1) - mean(data2) + qnorm(1 - (1 - confianza)/2)*sqrt(varianzaX/tamanos_muestrales[1] + varianzaY/tamanos_muestrales[2]))\n        } else if(tipo == \"less\") {\n          limites = mean(data1) - mean(data2) + qnorm(confianza)*sqrt(varianzaX/tamanos_muestrales[1] + varianzaY/tamanos_muestrales[2])\n        } else {\n          limites = mean(data1) - mean(data2) - qnorm(confianza)*sqrt(varianzaX/tamanos_muestrales[1] + varianzaY/tamanos_muestrales[2])\n        }\n      }\n    }\n    \n    if(tipo == \"greater\") {\n      limites = c(limites, limites[1] + 0.5*sqrt(varianza))\n      colores = c(ifelse(limites[1] > media, \"red\", \"black\"), \"white\")\n    } else if(tipo == \"less\") {\n      limites = c(limites[1] - 0.5*sqrt(varianza), limites)\n      colores = c(\"white\", ifelse(limites[2] < media, \"red\", \"black\"))\n    } else {\n      colores = rep(ifelse(limites[1] < media & limites[2] > media, \"black\", \"red\"), 2)\n    }\n    return(c(limites, colores))\n  }\n  \n  grafico_IC = function(x, y, colores, limites_x, simulaciones, media, nombre_media, tipoIC){\n    plot(\n      x = x, y = 1:simulaciones, col = colores[,1], pch = 16, las = 1, bty = \"n\",\n      ylim = c(1, simulaciones + 5), xlim = limites_x, xaxt = \"n\", yaxt = \"n\",\n      xlab = \"Valores del IC\", ylab = \"Número de simulación\",\n      main = ifelse(nombre_media == \"Una\",\n                    \"IC para la media proveniente \\n de una distribución normal\",\n                    \"IC para la diferencia de medias (X-Y) \\n provenientes de distribuciones normales\")\n    )\n    axis(side = 1, at = c(limites_x[1], media, limites_x[2]), labels = c(limites_x[1], media, limites_x[2]), xlim = limites_x)\n    axis(side = 2, at = round(seq(from = 1, to = simulaciones, length.out = 10), 0), las = 1)\n    points(x = y, y = 1:simulaciones, pch = 16, col = colores[,2])\n    if(tipoIC == \"less\"){\n      arrows(x1 = x, x0 = y, y1 = 1:simulaciones, y0 = 1:simulaciones, length = 0.07, col = colores[,2])\n      rojos = round(sum(colores[,2] == \"red\")/length(colores[,2])*100, digits = 2)\n      negros = 100 - rojos\n    } else if(tipoIC == \"greater\") {\n      arrows(x0 = x, x1 = y, y0 = 1:simulaciones, y1 = 1:simulaciones, length = 0.07, col = colores[,1])\n      rojos = round(sum(colores[,1] == \"red\")/length(colores[,2])*100, digits = 2)\n      negros = 100 - rojos\n    } else {\n      segments(x0 = x, x1 = y, y0 = 1:simulaciones, y1 = 1:simulaciones, col = colores[,1])\n      rojos = round(sum(colores[,1] == \"red\")/length(colores[,1])*100, digits = 2)\n      negros = 100 - rojos\n    }\n    rojos = paste(rojos, \"%\")\n    negros = paste(negros, \"%\")\n    # abline(v = media, col = \"black\", lty = 2)\n    segments(x0 = media, y0 = 0, x1 = media, y1 = simulaciones+1, lty = 2)\n    legend(\"topleft\", legend = c(negros, rojos), lty = 1, col = c(\"black\", \"red\"), title = \"Proporción de IC\", bty = \"n\")\n  }\n  \n  IC = function(tipo_varianzas, tipoIC, extremos, confianza, varianza, varianzaX = NA, varianzaY = NA,\n                tamanos_muestrales, media = media, nombre_media = nombre_media){\n    muestras_simuladas = simulaciones_muestras(nombre_media = nombre_media)\n    ics = lapply(X = muestras_simuladas, FUN = function(muestra){\n      if(input$VarianzasIC != \"Conocidas\") {\n        if(input$MediasIC == \"Una\") {\n          ic = calculo_IC(data1 = muestra, tipo = tipoIC, varianzas_conocidas = FALSE, varianza = varianza,\n                          extremos = extremos, confianza = confianza, media = media)\n        } else {\n          ic = calculo_IC(data1 = muestra$data1, data2 = muestra$data2, tipo = tipoIC, varianzas_conocidas = FALSE,\n                          tipo_varianzas = tipo_varianzas, extremos = extremos, confianza = confianza, media = media,\n                          varianza = varianza,)\n        }\n      } else {\n        if(input$MediasIC == \"Una\") {\n          ic = calculo_IC(data1 = muestra, tipo = tipoIC, varianzas_conocidas = TRUE, tipo_varianzas = tipo_varianzas,\n                          extremos = extremos, confianza = confianza, varianza = varianza, tamanos_muestrales = tamanos_muestrales,\n                          media = media)\n        } else {\n          ic = calculo_IC(data1 = muestra$data1, data2 = muestra$data2, tipo = tipoIC, varianzas_conocidas = TRUE,\n                          tipo_varianzas = tipo_varianzas, extremos = extremos, confianza = confianza, varianza = varianza,\n                          varianzaX = varianzaX, varianzaY = varianzaY, tamanos_muestrales = tamanos_muestrales, media = media)\n        }\n      }\n      return(ic)\n    })\n    ics = as.data.frame(matrix(unlist(ics), ncol = 4, byrow = TRUE))\n    ics[,1] = as.numeric(ics[,1])\n    ics[,2] = as.numeric(ics[,2])\n    return(list(ics, muestras_simuladas))\n  }\n  \n  muestras = NULL\n  ic = NULL\n  nombre_media_global = NULL\n  simulaciones_global = NULL\n  \n  observeEvent(list(input$go_IC),{\n    confianza = input$ConfianzaIC/100\n    simulaciones = input$simulacionesIC\n    simulaciones_global <<- simulaciones\n    media = ifelse(input$MediasIC == \"Una\", input$muIC, input$muICX - input$muICY)\n    tipoIC = switch(input$tipoIC, \"Bilateral\" = \"two.sided\", \"Acotado por la derecha\" = \"less\", \"Acotado por la izquierda\" = \"greater\")\n    extremos = switch(tipoIC, \"two.sided\" = 1:2, \"less\" = 2, \"greater\" = 1)\n    varianza = ifelse(input$MediasIC == \"Una\", input$sigma2IC, (input$varianzaUnaMediaX + input$varianzaUnaMediaY)/2)\n    tipo_varianzas = switch(input$VarianzasICMedias, \"Iguales\" = TRUE, \"Distintas\" = FALSE)\n    nombre_media = ifelse(input$MediasIC == \"Una\", \"Una\", \"Dos\")\n    nombre_media_global <<- nombre_media\n    varianzaX = input$varianzaUnaMediaX\n    varianzaY = input$varianzaUnaMediaY\n    tamanos_muestrales = c(input$nIC, input$nICX, input$nICY)\n    \n    ic_y_muestras = IC(tipo_varianzas = tipo_varianzas, tipoIC = tipoIC, extremos = extremos, confianza = confianza,\n                       varianza = varianza, varianzaX = varianzaX, varianzaY = varianzaY,\n                       tamanos_muestrales = tamanos_muestrales, media = media, nombre_media = nombre_media)\n    ic <<- ic_y_muestras[[1]]\n    muestras <<- ic_y_muestras[[2]]\n    \n    dif_maxima = max(abs(c(media - c(ic[,1], ic[,2]))))\n    maximo = round(media + 1.5*dif_maxima, digits = 4)\n    minimo = round(media - 1.5*dif_maxima, digits = 4)\n    \n    output$plot_ic = renderPlot({\n      grafico_IC(x = ic[,1], y = ic[,2], colores = ic[,3:4], limites_x = c(minimo, maximo),\n                 simulaciones = simulaciones, media = media, nombre_media = nombre_media, tipoIC = tipoIC)\n    }, height = 800)\n    \n    punto_seleccionado(NULL)\n    output$histogramaIC = renderPlot({\n      if(nombre_media == \"Una\"){\n        hist_muestra_IC(x = muestras[[simulaciones]], nombre_media = nombre_media,\n                        control_lanzamiento = TRUE, colores = ic[simulaciones,3:4])\n      } else {\n        hist_muestra_IC(x = muestras[[simulaciones]]$data1, y = muestras[[simulaciones]]$data2,\n                        nombre_media = nombre_media, control_lanzamiento = TRUE, colores = ic[simulaciones,3:4])\n      }\n    })\n    \n    output$histograma_medias_IC = renderPlot({\n      if(nombre_media == \"Una\"){\n        hist_medias_IC(x = unlist(lapply(X = muestras, FUN = mean)), nombre_media = nombre_media)\n      } else {\n        hist_medias_IC(\n          x = unlist(lapply(X = muestras, FUN = function(muestra){\n            return(mean(muestra$data1) - mean(muestra$data2))\n          })),\n          nombre_media = nombre_media)\n      }\n    })\n  })\n  \n  punto_seleccionado = reactiveVal(NULL)\n  \n  observeEvent(input$plot_click, {\n    click_y = input$plot_click$y\n    punto_seleccionado(round(click_y))\n    if(punto_seleccionado() >= 1 & punto_seleccionado() <= simulaciones_global){\n      output$histogramaIC = renderPlot({\n        if(nombre_media_global == \"Una\"){\n          hist_muestra_IC(x = muestras[[punto_seleccionado()]], nombre_media = nombre_media_global,\n                          control_lanzamiento = FALSE, colores = ic[punto_seleccionado(), 3:4])\n        } else {\n          hist_muestra_IC(x = muestras[[punto_seleccionado()]]$data1, y = muestras[[punto_seleccionado()]]$data2,\n                          nombre_media = nombre_media_global, control_lanzamiento = FALSE, colores = ic[punto_seleccionado(), 3:4])\n        }\n      })\n    } else {\n      output$histogramaIC = renderPlot({\n        if(nombre_media_global == \"Una\"){\n          hist_muestra_IC(x = muestras[[simulaciones_global]], nombre_media = nombre_media_global,\n                          control_lanzamiento = TRUE, colores = ic[simulaciones_global, 3:4])\n        } else {\n          hist_muestra_IC(x = muestras[[simulaciones_global]]$data1, y = muestras[[simulaciones_global]]$data2,\n                           nombre_media = nombre_media_global, control_lanzamiento = TRUE, colores = ic[simulaciones_global, 3:4])\n        }\n      })\n    }\n  })\n  \n \n  addPopover(session, id = \"plot_ic\", trigger = \"hover\", placement = \"left\",\n             content = \"Haga click en un IC (o cerca) para ver la distribución de los datos muestrales asociados.\",\n             title = \"\")\n  \n  ### Pruebas de hipótesis\n  \n  grafico_estadisticoPrueba = function(ic, mediaMuestra, varianza, mu0, tipoPH, nMuestra, est_prueba, valor_critico, confianza){\n    \n    max = max(abs(c(0 - c(est_prueba, valor_critico, 4))))\n    limites = c(0 - max * 1.2, 0 + max * 1.2)\n    \n    # print(c(limites, est_prueba, valor_critico, max))\n    \n    valores_x = seq(from = limites[1], to = limites[2], by = 0.01)\n    valores_x = c(valores_x, est_prueba, valor_critico, -est_prueba, -valor_critico)\n    valores_x = valores_x[order(valores_x)]\n    \n    plot(x = valores_x, y = dnorm(x = valores_x),\n         main = \"Distribución del estadístico de prueba\", xlab = \"Valores de Z\", ylab = \"Densidad\",\n         las = 1, xaxt = \"n\", type = \"l\", bty = \"n\", xlim = limites, ylim = c(0, 0.5))\n    axis(side = 1, at = c(limites[1], 0, limites[2]),\n         labels = round(c(limites[1], 0, limites[2]), 2), cex.axis = 1, las = 1)\n    \n    if(tipoPH == \"two.sided\") {\n      axis(side = 1, at = c(-abs(est_prueba), abs(est_prueba)), labels = round(c(-abs(est_prueba), abs(est_prueba)), 2),\n           col.axis = \"red\", cex.axis = 1, las = 1)\n      axis(side = 1, at = c(-abs(valor_critico), abs(valor_critico)), labels = round(c(-abs(valor_critico), abs(valor_critico)), 2),\n           col.axis = \"blue\", cex.axis = 1, las = 1)\n      polygon(x = c(-abs(valor_critico), valores_x[valores_x <= -abs(valor_critico)]),\n              y = c(min(dnorm(x = valores_x[valores_x <= -abs(valor_critico)])), dnorm(x = valores_x[valores_x <= -abs(valor_critico)])),\n              lty = 2, density = 5, col = \"blue\")\n      polygon(x = c(-abs(est_prueba), valores_x[valores_x <= -abs(est_prueba)]),\n              y = c(min(dnorm(x = valores_x[valores_x <= -abs(est_prueba)])), dnorm(x = valores_x[valores_x <= -abs(est_prueba)])),\n              lty = 2, density = 5, col = \"red\", angle = 135)\n      polygon(x = c(abs(valor_critico), valores_x[valores_x >= abs(valor_critico)]),\n              y = c(min(dnorm(x = valores_x[valores_x >= abs(valor_critico)])), dnorm(x = valores_x[valores_x >= abs(valor_critico)])),\n              lty = 2, density = 5, col = \"blue\")\n      polygon(x = c(abs(est_prueba), valores_x[valores_x >= abs(est_prueba)]),\n              y = c(min(dnorm(x = valores_x[valores_x >= abs(est_prueba)])), dnorm(x = valores_x[valores_x >= abs(est_prueba)])),\n              lty = 2, density = 5, col = \"red\", angle = 135)\n      valor_p = 2 - 2*pnorm(abs(est_prueba))\n    } else if(tipoPH == \"less\") {\n      axis(side = 1, at = c(est_prueba), labels = round(c(est_prueba), 2),\n           col.axis = \"red\", cex.axis = 1, las = 1)\n      axis(side = 1, at = c(valor_critico), labels = round(c(valor_critico), 2),\n           col.axis = \"blue\", cex.axis = 1, las = 1)\n      polygon(x = c(valor_critico, valores_x[valores_x <= valor_critico]),\n              y = c(min(dnorm(x = valores_x[valores_x <= valor_critico])), dnorm(x = valores_x[valores_x <= valor_critico])),\n              lty = 2, density = 5, col = \"blue\")\n      polygon(x = c(est_prueba, valores_x[valores_x <= est_prueba]),\n              y = c(min(dnorm(x = valores_x[valores_x <= est_prueba])), dnorm(x = valores_x[valores_x <= est_prueba])),\n              lty = 2, density = 5, col = \"red\", angle = 135)\n      valor_p = pnorm(est_prueba)\n    } else {\n      axis(side = 1, at = c(est_prueba), labels = round(c(est_prueba), 2),\n           col.axis = \"red\", cex.axis = 1, las = 1)\n      axis(side = 1, at = c(valor_critico), labels = round(c(valor_critico), 2),\n           col.axis = \"blue\", cex.axis = 1, las = 1)\n      polygon(x = c(valor_critico, valores_x[valores_x >= valor_critico]),\n              y = c(min(dnorm(x = valores_x[valores_x >= valor_critico])), dnorm(x = valores_x[valores_x >= valor_critico])),\n              lty = 2, density = 5, col = \"blue\")\n      polygon(x = c(est_prueba, valores_x[valores_x >= est_prueba]),\n              y = c(min(dnorm(x = valores_x[valores_x >= est_prueba])), dnorm(x = valores_x[valores_x >= est_prueba])),\n              lty = 2, density = 5, col = \"red\", angle = 135)\n      valor_p = 1 - pnorm(est_prueba)\n    }\n    \n    valor_p2 = ifelse(valor_p < 0.0001, \"<1e-4\", round(valor_p, digits = 4))\n    significancia = format((1 - confianza))\n    legend(\"topright\", legend = paste(c(\"Valor-p:\", \"Significancia:\"), c(valor_p2, significancia)), bty = \"n\",\n           lty = 2, col = c(\"red\", \"blue\"))\n    legend(\"topleft\", legend = ifelse(valor_p  <= 1 - confianza, \"Se rechaza\", \"No se rechaza\"), bty = \"n\",\n           title = \"Estado:\", text.font = 4)\n  }\n  \n  grafico_IC_PH = function(ic, mediaMuestra, varianza, mu0, tipoPH, nMuestra, est_prueba, valor_critico, confianza){\n    \n    max = max(abs(c(0 - c(est_prueba, valor_critico, 4))))\n    limites = c(0 - max * 1.2, 0 + max * 1.2)\n    \n    valores_x = seq(from = limites[1], to = limites[2], by = 0.01)\n    valores_x = c(valores_x, est_prueba, valor_critico, -est_prueba, -valor_critico)\n    valores_x = valores_x[order(valores_x)]\n    valores_y = dnorm(x = valores_x)\n    \n    transformacion = function(x.barra){\n      return((x.barra - mu0)/sqrt(varianza/nMuestra))\n    }\n    \n    transformacion_inversa = function(Z0){\n      return(mu0 + Z0*sqrt(varianza/nMuestra))\n    }\n    \n    plot(x = valores_x, y = valores_y,\n         main = \"Distribución de la media muestral \\n e intervalo de confianza\", xlab = \"Valores del promedio\", ylab = \"Densidad\",\n         las = 1, xaxt = \"n\", type = \"l\", bty = \"n\", xlim = limites, ylim = c(0, 0.5))\n    axis(side = 1, at = c(limites[1], 0, limites[2]),\n         labels = round(transformacion_inversa(c(limites[1], 0, limites[2])), 4), cex.axis = 1, las = 1)\n    segments(x0 = 0, x1 = 0, y0 = 0, y1 = max(valores_y), col = \"black\", lty = 2)\n    \n    ic = as.numeric(ic[1:2])\n    ic2 = transformacion(as.numeric(ic[1:2]))\n    max_y = max(valores_y)*0.5\n    \n    if(tipoPH == \"two.sided\") {\n      segments(x0 = ic2[1], x1 = ic2[2], y0 = max_y, y1 = max_y, col = \"red\", lty = 2)\n      legend(\"topleft\", legend = paste0(\"(\", round(ic[1], 4), \", \", round(ic[2], 4), \")\"),\n             bty = \"n\", title = \"IC\", lty = 2, col = \"red\")\n    } else if(tipoPH == \"less\") {\n      arrows(x1 = limites[1], x0 = ic2[2], y0 = max_y, y1 = max_y, length = 0.1, col = \"red\", lty = 2)\n      legend(\"topleft\", legend = paste0(\"(-Inf, \", round(ic[2], 4), \")\"),\n             bty = \"n\", title = \"IC\", lty = 2, col = \"red\")\n    } else {\n      arrows(x0 = ic2[1], x1 = limites[2], y0 = max_y, y1 = max_y, length = 0.1, col = \"red\", lty = 2)\n      legend(\"topleft\", legend = paste0(\"(\", round(ic[1], 4), \", Inf)\"),\n             bty = \"n\", title = \"IC\", lty = 2, col = \"red\")\n    }\n    legend(\"topright\", legend = mu0, bty = \"n\", title = \"mu_0\", lty = 2)\n  }\n  \n  valor_critico = function(confianza, tipo, mu0, varianza, nMuestra, mediaMuestra){\n    if(tipo == \"two.sided\") {\n      valor_critico = qnorm(1 - (1 - confianza)/2)\n    } else if(tipo == \"less\") {\n      valor_critico = qnorm(1 - confianza)\n    } else {\n      valor_critico = qnorm(confianza)\n    }\n    estadistico_prueba = (mediaMuestra - mu0)/(sqrt(varianza/nMuestra))\n    return(c(estadistico_prueba, valor_critico))\n  }\n  \n  observeEvent(list(input$go_PH), {\n    confianza = input$confianzaPH/100\n    mu0 = input$mu0PH\n    mediaMuestra = input$mediaMuestraPH\n    tipoPH = switch(input$tipoPH, \"Bilateral\" = \"two.sided\", \"Unilateral derecha\" = \"greater\", \"Unilateral izquierda\" = \"less\")\n    extremos = switch(tipoPH, \"two.sided\" = 1:2, \"less\" = 2, \"greater\" = 1)\n    varianza = input$sigma2PH\n    nombre_media = \"Una\"\n    nMuestra = input$nPH\n    \n    # Los argumentos data debe ser el promedio n veces para que calce con el cálculo del IC de la función \"calculo_IC\"\n    ic = calculo_IC(data1 = rep(mediaMuestra, nMuestra), tipo = tipoPH, varianzas_conocidas = TRUE, varianza = varianza,\n                    extremos = extremos, confianza = confianza, media = mediaMuestra, tamanos_muestrales = nMuestra)\n    \n    valor_critico = valor_critico(confianza = confianza, tipo = tipoPH, mu0 = mu0, varianza = varianza,\n    nMuestra = nMuestra, mediaMuestra = mediaMuestra)\n      \n    output$plot_ph = renderPlot({\n      grafico_estadisticoPrueba(ic = ic, media = mediaMuestra, varianza = varianza, mu0 = mu0, tipoPH = tipoPH, nMuestra = nMuestra,\n                    est_prueba = valor_critico[1], valor_critico = valor_critico[2], confianza = confianza)\n    }, height = 400)\n    \n    output$plot_ic_ph = renderPlot({\n      grafico_IC_PH(ic = ic, media = mediaMuestra, varianza = varianza, mu0 = mu0, tipoPH = tipoPH, nMuestra = nMuestra,\n                    est_prueba = valor_critico[1], valor_critico = valor_critico[2], confianza = confianza)\n    }, height = 400)\n    \n  })\n  \n  addPopover(session, id = \"plot_ic_ph\", trigger = \"hover\", placement = \"left\",\n             content = \"Se rechaza la hipótesis nula cuando la línea roja punteada (IC) intersecta la línea vertical negra punteada (media bajo hipótesis nula).\",\n             title = \"\")\n  \n  ### Regresión Lineal (Simple)\n  \n  regresion = function(x, y){\n    modelo = lm(y ~ x)\n    return(modelo)\n  }\n  \n  grafico_RL = function(x, y, modelo){\n    betas = modelo$coefficients\n    confidence_values = predict.lm(modelo, interval = \"confidence\")\n    prediction_values = predict.lm(modelo, newdata = data.frame(\"x\" = x, \"y\" = y), interval = \"prediction\")\n    y_confidence = confidence_values[order(confidence_values[,1]), 2:3]\n    y_prediction = prediction_values[order(prediction_values[,1]), 2:3]\n    plot(x = x, y = y, las = 1, bty = \"n\",\n         main = \"Regresión Lineal Simple\", xlab = \"Valores de X\", ylab = \"Valores de Y\",\n         ylim = c(min(c(y, y_confidence, y_prediction)), max(c(y, y_confidence, y_prediction))))\n    segments(x0 = min(x), x1 = max(x), y0 = betas[1] + betas[2]*min(x), y1 = betas[1] + betas[2]*max(x), col = \"red\", lty = 1)\n    lines(x = x[order(x)], y = y_confidence[,1], col = \"blue\", lty = 2)\n    lines(x = x[order(x)], y = y_confidence[,2], col = \"blue\", lty = 2)\n    lines(x = x[order(x)], y = y_prediction[,1], col = \"darkgreen\" ,lty = 2)\n    lines(x = x[order(x)], y = y_prediction[,2], col = \"darkgreen\", lty = 2)\n    legend(\"topleft\", legend = c(\"Recta de regresión ajustada\", \"IC del 95% para la media\", \"IC del 95% para la predicción\"),\n           lty = c(1, 2, 2), col = c(\"red\", \"blue\", \"darkgreen\"), bty = \"n\")\n  }\n  \n  grafico_supuestos = function(x, y, modelo){\n    par(mfrow = c(2,2), bty = \"n\", las = 1)\n    plot(x = modelo$fitted.values, y = residuals(modelo),\n         main = \"Linealidad\", xlab = \"Valores ajustados\", ylab = \"Residuos\")\n    acf(residuals(modelo),\n        main = \"Independenica \\n (Función de Autocorrelación: ACF)\", xlab = \"Lag\", ylab = \"ACF\")\n    plot(x = modelo$fitted.values, y = sqrt(abs(rstandard(modelo))),\n         main = \"Homocedasticidad\", xlab = \"Valores ajustados\", ylab = \"Raíz de los residuos estandarizados\")\n    qqnorm(modelo$residuals, main = \"Normalidad \\n (Cuantil - Cuantil)\", xlab = \"Cuantiles teóricos\", ylab = \"Cuantiles observados\")\n    qqline(modelo$residuals)\n  }\n  \n  violacion_supuestos = function(x, y){\n    \n    aux_y = y\n    aux_x = x\n    \n    if(!is.null(input$violacionSupuestos)){\n      \n      if (\"Linealidad\" %in% input$violacionSupuestos){\n        y = y + (x/70)^3\n      }\n      \n      if (\"Independencia\" %in% input$violacionSupuestos ){\n        y = apply(X = as.matrix(cbind(seq(from = 0, to = 45, length.out = length(y)), y)), MARGIN = 1, FUN = function(fila){\n          recorrido =  sin(fila[1])*200 + fila[2]\n          return(recorrido)\n        })\n      } \n      \n      if (\"Homocedasticidad\" %in% input$violacionSupuestos){\n        incrementos = cumsum(seq(from = 0.8, to = 1.2, length.out = length(y)))\n        y = abs(y*incrementos - max(y)/2)\n      }\n      \n      if (\"Normalidad\" %in% input$violacionSupuestos){\n        n_min = y[order(y)][8]\n        n_max = y[order(y)][(length(y)-8)]\n        y[y <= n_min] = y[y <= n_min] - y[y == n_max]*0.5\n        y[y >= n_max] = y[y >= n_max] + y[y == n_max]*0.5\n      } \n    }\n    return(y)\n  }\n  \n  observeEvent(list(input$go_RL), {\n    \n    set.seed(2024)\n    desviacion_simulacion = 100\n    x_poblacion = seq(from = 1, to = input$nPoblacionalRLS, by = 1)\n    y_poblacion = apply(X = as.matrix(x_poblacion + 100), MARGIN = 1, FUN = function(media){\n      return(rnorm(n = 1, mean = media, sd = desviacion_simulacion))\n    })\n    \n    n_muestra = sample(x = 1:input$nPoblacionalRLS, size = input$nMuestralRLS, replace = FALSE)\n    x_muestral = x_poblacion[n_muestra]\n    y_muestral = y_poblacion[n_muestra]\n    y_muestral = violacion_supuestos(x = x_muestral, y = y_muestral)\n    RL = regresion(x = x_muestral, y = y_muestral)\n    \n    output$plot_rl = renderPlot({\n      grafico_RL(x = x_muestral, y = y_muestral, modelo = RL)\n    })\n    \n    output$plot_supuestos = renderPlot({\n      grafico_supuestos(x = x_muestral, y = y_muestral, modelo = RL)\n    })\n    \n    output$resumen_rl = function(){\n      summary_RL = round(summary(RL)$coefficients, digits = 4)\n      summary_RL = ifelse(summary_RL == 0, \"<2e-16\", summary_RL)\n      rownames(summary_RL) <- c(\"β<sub>0<\/sub>\", \"β<sub>1<\/sub>\")\n      kableExtra::kbl(summary_RL, escape = FALSE, booktabs = T, align = \"c\",\n            caption = \"Resumen del modelo de regresión lineal\",\n            col.names = c(\"Estimación\", \"Error estándar\", \"Estadístico de prueba t\", \"Valor-p\")) |>\n        kableExtra::kable_styling(full_width = TRUE, bootstrap_options = c(\"condensed\", \"striped\"))\n    }\n    \n    output$resumen_rl_metricas = function(){\n      summary_RL = summary(RL)\n      metrics = round(unlist(summary_RL[c(\"fstatistic\", \"sigma\", \"r.squared\", \"adj.r.squared\")])[c(1,4:6)], digits = 4)\n      kableExtra::kbl(t(as.matrix(metrics)), escape = FALSE, booktabs = T, align = \"c\",\n        col.names = c(\"Estadístico F<sub>0<\/sub>\", \"Error estándar residual\", \"R<sup>2<\/sup>\", \"R<sup>2<\/sup> ajustado\")) |>\n        kableExtra::kable_styling(full_width = TRUE, bootstrap_options = c(\"condensed\", \"striped\"))\n    }\n\n    output$resumen_supuestos = function(){\n      \n      tests = list(\n        lmtest::bptest(formula = formula(RL), data = data.frame(\"x\" = x_muestral, \"y\" = y_muestral)),\n        lmtest::dwtest(formula = formula(RL), data = data.frame(\"x\" = x_muestral, \"y\" = y_muestral), alternative = \"two.sided\"),\n        shapiro.test(x = rstandard(RL))\n      ) |> lapply(FUN = function(test){\n        valor_p = round(test$p.value, digits = 4)\n        statistic = round(test$statistic, digits = 4)\n        valor_p = ifelse(valor_p < 0.0001, \"<1e-4\", valor_p)\n        statistic = ifelse(statistic < 0.0001, \"<1e-4\", statistic)\n        return(c(statistic, valor_p))\n      }) |> unlist() |> matrix(ncol = 2, byrow = TRUE) |> data.frame() |> setNames(c(\"Estadístico\", \"Valor-p\"))\n      \n      \n      tests$Prueba = c(\"Breusch-Pagan\", \"Durbin-Watson\", \"Shapiro-Wilk\")\n      tests$Supuesto = c(\"Homocedasticidad\", \"Independencia\", \"Normalidad\")\n      tests = tests[, c(\"Supuesto\", \"Prueba\", \"Estadístico\", \"Valor-p\")]\n      \n      kableExtra::kbl(tests, escape = FALSE, booktabs = T, align = \"c\",\n        caption = \"Prueba de hipótesis de los supuestos del modelo de regresión lineal\") |>\n        kableExtra::kable_styling(full_width = TRUE, bootstrap_options = c(\"condensed\", \"striped\"))\n    }\n\n  })\n  \n  addPopover(session = session, id = \"resumen_supuestos\", trigger = \"hover\", placement = \"bottom\",\n             content = \"Es posible que la violación de un determinado supuesto influya en otro. Revise el caso de violación del supuesto de homocedasticidad únicamente.\",\n             title = \"\") \n  \n# End general function  \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","type":"text"},{"name":"ui.R","content":"library(shiny)\nlibrary(shinydashboard)\n# library(shinydashboardPlus)\nlibrary(Cairo)\noptions(shiny.usecairo = T)\nlibrary(kableExtra)\nlibrary(shinyBS)\n\n# Encabezado general\n\nencabezado = dashboardHeader(title = \"Estadística\", shinydashboardPlus::userOutput(\"user\"))\n\n# Panel lateral general: filtro de temas\n\npanelLateral = dashboardSidebar(\n  collapsed = FALSE,\n  sidebarMenu(\n    id = \"sidebarID\",\n    menuItem(\"Teorema Central del Límite\", tabName = \"DM1\"),\n    menuItem(\"IC: Intervalos de confianza\", tabName = \"IC\"),\n    menuItem(\"Pruebas de Hipótesis\", tabName = \"PH\"),\n    menuItem(\"Regresión Lineal\", tabName = \"RL\")\n  )\n)\n\n# Paneles: cuerpo de cada panel del Panel lateral\n# Un cuerpo se puede volver a dividir en otro tipo de Layout\n\nsimulador = actionButton(inputId = \"go_DM1\", label = \"Simular\")\n\ncuerpo_DM1 = sidebarLayout(\n  sidebarPanel(\n    width = 3,\n    selectInput(inputId = \"distribucionDM1\", label = \"Distribución\", choices = c(\"Normal\", \"Exponencial\", \"Binomial\", \"Poisson\")),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Normal'\",\n      sliderInput(inputId = \"mediaDM1_normal\", label = \"Media poblacional\", min = 0, max = 20, value = 12, step = 0.2),\n      sliderInput(inputId = \"varianzaDM1_normal\", label = \"Varianza poblacional\", min = 0, max = 20, value = 2, step = 0.1),\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Binomial'\",\n      sliderInput(inputId = \"nDM1_binomial\", label = \"Ensayos\", min = 1, max = 100, value = 12, step = 1),\n      sliderInput(inputId = \"pDM1_binomial\", label = \"Probabilidad de éxito\", min = 0, max = 1, value = 0.4, step = 0.05),\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Exponencial'\",\n      sliderInput(inputId = \"tasaDM1_exponencial\", label = \"Tasa\", min = 0, max = 20, value = 5, step = 0.1)\n    ),\n    conditionalPanel(\n      condition = \"input.distribucionDM1 == 'Poisson'\",\n      sliderInput(inputId = \"tasaDM1_poisson\", label = \"Tasa\", min = 0, max = 20, value = 8, step = 0.1)\n    ),\n    sliderInput(inputId = \"nDM1\", label = \"Tamaño muestral\", min = 100, max = 1000, value = 200, step = 50),\n    sliderInput(inputId = \"simulacionesDM1\", label = \"Cantidad de simulaciones\", min = 100, max = 7000, value = 1300, step = 100),\n    simulador\n  ),\n  mainPanel(\n    width = 9,\n    plotOutput(\"Histograma_promedios\"), plotOutput(\"fdp_fmp_simulaciones\")\n  )\n)\n\nsimulador2 = actionButton(inputId = \"go_IC\", label = \"Simular\")\n\ncuerpo_IC = sidebarLayout(\n  sidebarPanel(\n    width = 3,\n    fluidRow(\n      column(width = 4, radioButtons(inputId = \"MediasIC\", label = \"Medias\", choices = c(\"Una\", \"Dos\"))),\n      column(width = 8, radioButtons(inputId = \"VarianzasIC\", label = \"Varianzas\", choices = c(\"Conocidas\", \"Desconocidas\")))\n    ),\n    conditionalPanel(\n      condition = \"input.VarianzasIC == 'Desconocidas' && input.MediasIC == 'Dos'\",\n      radioButtons(inputId = \"VarianzasICMedias\", label = \"Varianzas desconocidas\", choices = c(\"Iguales\", \"Distintas\"))\n    ),\n    sliderInput(inputId = \"ConfianzaIC\", label = \"% Confianza\", min = 10, max = 99, value = 90, step = 1),\n    radioButtons(inputId = \"tipoIC\", label = \"Tipo de IC\", choices = c(\"Bilateral\", \"Acotado por la derecha\", \"Acotado por la izquierda\")),\n    conditionalPanel(\n      condition = \"input.MediasIC == 'Una'\",\n      sliderInput(inputId = \"muIC\", label = \"Media poblacional\", min = -20, max = 20, value = 0, step = 0.1),\n      sliderInput(inputId = \"sigma2IC\", label = \"Varianza poblacional\", min = 5, max = 30, value = 10, step = 0.1),\n      sliderInput(inputId = \"nIC\", label = \"Tamaño muestral\", min = 10, max = 200, value = 120, step = 10)\n    ),\n    conditionalPanel(\n      condition = \"input.MediasIC == 'Dos'\",\n      fluidRow(\n        column(width = 6, sliderInput(inputId = \"muICX\", label = \"Media poblacional X\", min = -10, max = 10, value = 0, step = 0.5)),\n        column(width = 6, sliderInput(inputId = \"muICY\", label = \"Media poblacional Y\", min = -10, max = 10, value = 7, step = 0.5))\n      ),\n      fluidRow(\n        column(width = 6, sliderInput(inputId = \"varianzaUnaMediaX\", label = \"Varianza poblacional X\", min = 10, max = 25, value = 12, step = 0.5)),\n        column(width = 6, sliderInput(inputId = \"varianzaUnaMediaY\", label = \"Varianza poblacional Y\", min = 10, max = 25, value = 16, step = 0.5))\n      ),\n      fluidRow(\n        column(width = 6, sliderInput(inputId = \"nICX\", label = \"Tamaño muestral X\", min = 50, max = 150, value = 120, step = 10)),\n        column(width = 6, sliderInput(inputId = \"nICY\", label = \"Tamaño muestral Y\", min = 50, max = 150, value = 80, step = 10))\n      ),\n    ),\n    sliderInput(inputId = \"simulacionesIC\", label = \"Cantidad de simulaciones\", min = 10, max = 100, value = 60, step = 1),\n    simulador2\n  ),\n  mainPanel(\n    width = 9,\n    fluidRow(\n      column(width = 6, plotOutput(\"plot_ic\", click = \"plot_click\", height = \"800px\")),\n      column(width = 6, plotOutput(\"histogramaIC\"), plotOutput(\"histograma_medias_IC\"))\n    )\n  )\n)\n\nsimulador3 = actionButton(inputId = \"go_PH\", label = \"Simular\")\n\ncuerpo_PH = sidebarLayout(\n  sidebarPanel(\n    width = 3,\n    radioButtons(inputId = \"mediasPH\", label = \"Medias\", choices = c(\"Una\")),#, \"Dos\")),\n    radioButtons(inputId = \"varianazasPH\", label = \"Varianzas\", choices = c(\"Conocidas\")),#, \"Desconocidas\")),\n    radioButtons(inputId = \"tipoPH\", label = \"Tipo de prueba\", choices = c(\"Bilateral\", \"Unilateral derecha\", \"Unilateral izquierda\")),\n    sliderInput(inputId = \"mu0PH\", label = \"Media bajo Hipótesis nula\", min = -2, max = 2, value = 0, step = 0.02),\n    sliderInput(inputId = \"sigma2PH\", label = \"Varianza poblacional\", min = 1, max = 50, value = 10, step = 0.5),\n    sliderInput(inputId = \"mediaMuestraPH\", label = \"Media muestral\", min = -2, max = 2, value = 0.6, step = 0.02),\n    sliderInput(inputId = \"nPH\", label = \"Tamaño muestral\", min = 10, max = 200, value = 120, step = 10),\n    sliderInput(inputId = \"confianzaPH\", label = \"% Confianza\", min = 10, max = 99, value = 87, step = 1),\n    simulador3\n  ),\n  mainPanel(\n    width = 9,\n    fluidRow(\n      column(width = 12, plotOutput(\"plot_ph\"), plotOutput(\"plot_ic_ph\"))\n    )#,\n    # fluidRow(\n    #   column(width = 6, withMathJax(includeMarkdown(\"Regresion+Lineal/Prueba.md\")))\n    # )\n  )\n)\n\nsimulador4 = actionButton(inputId = \"go_RL\", label = \"Simular\")\ncuerpo_RL = sidebarLayout(\n  sidebarPanel(\n    width = 2,\n    radioButtons(inputId = \"tipoRL\", label = \"Tipo de regresión\", choices = c(\"Simple\")),\n    # radioButtons(inputId = \"tipoRL\", label = \"Tipo de regresión\", choices = c(\"Simple\", \"Múltiple\")),\n    conditionalPanel(\n      condition = \"input.tipoRL == 'Simple'\",\n      sliderInput(inputId = \"nPoblacionalRLS\", label = \"Tamaño poblacional\", min = 600, max = 800, value = 700, step = 10),\n      sliderInput(inputId = \"nMuestralRLS\", label = \"Tamaño muestral\",  min = 100, max = 550, value = 240, step = 10)\n    ),\n    checkboxGroupInput(inputId = \"violacionSupuestos\", label = \"Violación de supuestos\",\n                       choices = c(\"Linealidad\", \"Normalidad\", \"Homocedasticidad\", \"Independencia\")),\n    simulador4\n  ),\n  mainPanel(\n    width = 10,\n    fluidRow(\n      column(width = 6, plotOutput(\"plot_rl\", height = \"500px\"), br(), tableOutput(\"resumen_rl\"), tableOutput(\"resumen_rl_metricas\")),\n      column(width = 6, plotOutput(\"plot_supuestos\", height = \"500px\"), br(), tableOutput(\"resumen_supuestos\"))\n    )\n  )\n)\n\nhover_load_BS_package = bsPopover(id = \"Histograma_promedios\", trigger = \"hover\", placement = \"left\",\n                                   content = \"La función Aproximada corresponde a la función de densidad que generan los promedios muestrales simulados, la cual, se compara con la función de densidad Teórica.\",\n                                   title = \"\")\n\n# Asignando los cuerpos por filtro\nhoja_DM = tabItem(tabName = \"DM1\", fluidPage(cuerpo_DM1), hover_load_BS_package)\nhoja_IC = tabItem(tabName = \"IC\", fluidPage(cuerpo_IC))\nhoja_PH = tabItem(tabName = \"PH\", fluidPage(cuerpo_PH))\nhoja_RL = tabItem(tabName = \"RL\", fluidPage(cuerpo_RL))\n\ncuerpo = dashboardBody(\n  tabItems(hoja_DM, hoja_IC, hoja_PH, hoja_RL)\n)\n\n# Despliegue general\nui = dashboardPage(header = encabezado, sidebar = panelLateral, body = cuerpo, skin = \"black\")\n\n\n","type":"text"},{"name":"Logo/Profile.jpeg","content":"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","type":"binary"},{"name":"Regresion+Lineal/Prueba.md","content":"# Probando elementos de inscrustación\n\n$$\nA + B = C\n$$\n\n1. Hola\n\n2. CHao\n\n**HOLA**S","type":"text"}]
